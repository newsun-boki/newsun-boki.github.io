<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-05T12:11:08.703Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Blender使用实录</title>
    <link href="http://example.com/2022/01/05/Blender-use/"/>
    <id>http://example.com/2022/01/05/Blender-use/</id>
    <published>2022-01-05T12:10:02.000Z</published>
    <updated>2022-01-05T12:11:08.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Blender使用实录"><a href="#Blender使用实录" class="headerlink" title="Blender使用实录"></a>Blender使用实录</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Blender是一款轻量级的三维建模软件。比起我以前用过的C4D来说，Blender真的很小(只有不到200M)，所以强烈推荐作为入门三维建模软件。 </p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>直接steam搜索blender下载即可，不仅免费还自动更新。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/newsun-boki/img-folder@main/image.4csuxbke29k0.png"                                     ></p><h2 id="界面初始"><a href="#界面初始" class="headerlink" title="界面初始"></a>界面初始</h2><h3 id="查看三维模型常用快捷键"><a href="#查看三维模型常用快捷键" class="headerlink" title="查看三维模型常用快捷键"></a>查看三维模型常用快捷键</h3><ul><li>鼠标中键——–旋转</li><li>鼠标中键+shift——–平移</li><li>鼠标中键+alt——–每隔45度自动吸附的旋转</li><li>数字键12346789——–切换不同视图</li><li>数字键5——–切换透视或平视视图(当你需要查看三视图时这个很重要)</li><li>ctrl+p ——–用来添加父级</li><li>ctrl+j———搞成一个整体</li></ul><ul><li><p>旋转(R)平移(G)缩放(S)</p></li><li><p>旋转(R)平移(G)缩放(S)模式下按shift+x/y/z锁住某一轴</p></li><li><p>(alt+R/G/S)旋转/平移/缩放清零。</p></li><li><p>ctrl + space全屏状态</p></li><li><p>单独显示选中物体——– “/“</p></li><li><p>shift+d——-复制物体</p></li><li><p>alt+d——–同样是复制物体，且在编译模式下复制出的物体操作与原来同步 </p></li><li><p>ctrl+g——–选择点后按下将点加入顶点组</p></li></ul><h4 id="编辑模式下"><a href="#编辑模式下" class="headerlink" title="编辑模式下"></a>编辑模式下</h4><ul><li>选物体按tab进入物体的编辑模式</li><li>在编辑模式下选中面按e伸缩面</li><li>ctrl + 1/2/3切换选择点/线/面</li><li>i——–插入</li><li>ctrl+r——-环切</li><li>p——–奖物体分开</li></ul><h4 id="摄像机模式下"><a href="#摄像机模式下" class="headerlink" title="摄像机模式下"></a>摄像机模式下</h4><ul><li><p>按0进入摄像机模式</p></li><li><p>按home把取景框调到最大</p></li><li><p>可以开视角锁定</p></li></ul><h4 id="3D游标"><a href="#3D游标" class="headerlink" title="3D游标"></a>3D游标</h4><p>  3D游标是个非常方便的设计。</p><ul><li><p>shift+右键———放置3d游标，会将3D游标放到当前鼠标位置的物体表面</p></li><li><p>当你想在某个地方创建一个图形时会默认创建在3D游标处</p></li><li><p>视角锁定3D游标会很方便</p></li></ul><h2 id="地形设计"><a href="#地形设计" class="headerlink" title="地形设计"></a>地形设计</h2><ul><li>建立很宽的地面</li><li>将其细分为很多小块</li><li>用衰减编辑去调整</li></ul><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="bool-tool"><a href="#bool-tool" class="headerlink" title="bool tool"></a>bool tool</h3><p>bool运算插件：先选中切割物体再选中被切割物体，按ctrl+小键盘上的减号-</p><h4 id="MACHINtool3"><a href="#MACHINtool3" class="headerlink" title="MACHINtool3"></a>MACHINtool3</h4><p>​    一个比较方便的快捷键插件，有以下快捷键</p><ul><li>TAB—–可选择编辑模式以及点线面</li><li>.——–可以选择以什么地方进行缩放旋转等操作</li><li>F——-从unity3D拿过来的快捷键，聚焦到物体，非常方便</li><li>ZQ——–原来是PGUP，PGDN，用来显示一些东西</li><li>shift+alt+xyz——–先选择一个物体a，再选择物体b，创建a关于b的对称。或者直接创建物体关于自身的对称</li><li>shift+s———将3d游标放到一个地方</li><li>4——–通过点生成面</li><li>alt+a——–对齐</li><li>shift+alt+左键——–选择闭环 </li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大概就是记住一些关键的操作</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Blender使用实录&quot;&gt;&lt;a href=&quot;#Blender使用实录&quot; class=&quot;headerlink&quot; title=&quot;Blender使用实录&quot;&gt;&lt;/a&gt;Blender使用实录&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Blender" scheme="http://example.com/categories/Blender/"/>
    
    
    <category term="-Blender" scheme="http://example.com/tags/Blender/"/>
    
  </entry>
  
  <entry>
    <title>Aimbot整体流程框架</title>
    <link href="http://example.com/2021/12/05/Aimbot/"/>
    <id>http://example.com/2021/12/05/Aimbot/</id>
    <published>2021-12-05T07:24:48.000Z</published>
    <updated>2021-12-05T08:20:48.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Aimbot"><a href="#Aimbot" class="headerlink" title="Aimbot"></a>Aimbot</h1><p>Aimbot是robomaster笃行战队2022年的视觉组整体框架代码。总共包含自瞄和打符两个部分。现在由于还在构建之出，为了理清思路，防止结构混乱，也为了新人能够更好的理解此代码特此写下次介绍来辅助整体代码的构建。此框架随代码进展动态更新。</p><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>Robomaster是由大疆主办的一场全国大学生机器人大赛，其特点为高度对抗性</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Aimbot&quot;&gt;&lt;a href=&quot;#Aimbot&quot; class=&quot;headerlink&quot; title=&quot;Aimbot&quot;&gt;&lt;/a&gt;Aimbot&lt;/h1&gt;&lt;p&gt;Aimbot是robomaster笃行战队2022年的视觉组整体框架代码。总共包含自瞄和打符两个部分。现在由</summary>
      
    
    
    
    <category term="rm" scheme="http://example.com/categories/rm/"/>
    
    
    <category term="code" scheme="http://example.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>yolov5中pt转openvino</title>
    <link href="http://example.com/2021/11/28/yolov5-openvino/"/>
    <id>http://example.com/2021/11/28/yolov5-openvino/</id>
    <published>2021-11-28T10:10:07.000Z</published>
    <updated>2021-11-28T13:05:38.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yolov5中pt转openvino"><a href="#yolov5中pt转openvino" class="headerlink" title="yolov5中pt转openvino"></a>yolov5中pt转openvino</h1><p>由于我发现我每次转一次我都要重新google一遍，感觉我贫瘠的大脑无法记下这几条简单的命令，所以记录一下。</p><h2 id="pt-转-onnx"><a href="#pt-转-onnx" class="headerlink" title="pt 转 onnx"></a>pt 转 onnx</h2><p>在yolov5的路径下使用<code>models/export.py</code>转换，默认会放到和<code>yolov5s.pt</code>同一路径下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python models/export.py --weights polygon_best.pt --img 640 --batch 1</span><br></pre></td></tr></table></figure><h2 id="onnx-转-openvino"><a href="#onnx-转-openvino" class="headerlink" title="onnx 转 openvino"></a>onnx 转 openvino</h2><p>先切换到指定目录下在运行python程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/intel/openvino_2021/deployment_tools/model_optimizer</span><br><span class="line"></span><br><span class="line">python mo.py --input_model ~/rm/polygon-weights/640-n/polygon_best.onnx --input_shape [1,3,640,640] --data_type FP32 --output_dir ~/rm/polygon-weights/640-n</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;yolov5中pt转openvino&quot;&gt;&lt;a href=&quot;#yolov5中pt转openvino&quot; class=&quot;headerlink&quot; title=&quot;yolov5中pt转openvino&quot;&gt;&lt;/a&gt;yolov5中pt转openvino&lt;/h1&gt;&lt;p&gt;由于我发现我</summary>
      
    
    
    
    <category term="rm" scheme="http://example.com/categories/rm/"/>
    
    
    <category term="yolov5" scheme="http://example.com/tags/yolov5/"/>
    
    <category term="openvino" scheme="http://example.com/tags/openvino/"/>
    
  </entry>
  
  <entry>
    <title>视觉进阶培训1-运动预测</title>
    <link href="http://example.com/2021/11/25/rm-train-1/"/>
    <id>http://example.com/2021/11/25/rm-train-1/</id>
    <published>2021-11-25T06:38:58.000Z</published>
    <updated>2021-11-25T06:46:47.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="视觉进阶培训1-运动预测"><a href="#视觉进阶培训1-运动预测" class="headerlink" title="视觉进阶培训1-运动预测"></a>视觉进阶培训1-运动预测</h1><p>三维弹球，准确的来说有点像气体分子的运动，可以看成空间中有一个小球（无重力），以随机的速度在空间中游动，碰到边缘会反弹，而你要做的就是预测小球一定时间之后的位置。</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ul><li><p>numpy 1.20</p></li><li><p>ros melodic</p></li><li><p>Eigen </p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/newsun-boki/3dBall.git</span><br><span class="line"><span class="built_in">cd</span> 3dBall</span><br><span class="line">catkin_make <span class="comment"># rm -rf ./build ./devel if exits</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.bash <span class="comment">#记得每打开一个终端都要source一下</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">roscore</span><br><span class="line"></span><br><span class="line">rosrun random_ball simu.py <span class="comment">#用于生成小球</span></span><br><span class="line"></span><br><span class="line">rosrun random_ball basic_shapes <span class="comment">#用于生成绿色框</span></span><br><span class="line"></span><br><span class="line">rviz -d src/random_ball/rm.rviz <span class="comment">#在rviz中显示</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/newsun-boki/img-folder@main/20211125/ball.6tt9rynnjeo0.gif"                                     ></p><h2 id="任务说明"><a href="#任务说明" class="headerlink" title="任务说明"></a>任务说明</h2><h3 id="必要知识"><a href="#必要知识" class="headerlink" title="必要知识"></a>必要知识</h3><ul><li>c++/python基础知识</li><li>了解ros的topic机制</li><li>了解rviz的使用</li><li>卡尔曼滤波(KF)或扩展卡尔曼滤波(EKF)或抗差卡尔曼滤波(UKF)<h3 id="任务简介"><a href="#任务简介" class="headerlink" title="任务简介"></a>任务简介</h3></li></ul><p>已知小球小球当前时刻的三维坐标，预测小球一定时间之后所处的位置(反弹部分不作要求)。节点图如下。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/newsun-boki/img-folder@main/20211125/Screenshot-from-2021-11-25-13-22-34.1hdjhcrer068.png"                      alt="节点图"                ></p><ul><li>节点<code>/basic_shapes</code>用于发布<code>/visualization_marker</code>话题，即绿色边界框。</li><li>节点<code>/random_ball</code>用于发布<code>/position</code>话题，即小球的位置。<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3></li></ul><h4 id="获取小球当前位置。"><a href="#获取小球当前位置。" class="headerlink" title="获取小球当前位置。"></a>获取小球当前位置。</h4><ul><li>当运行<code>rosrun random_ball simu.py</code>后，通过<code>rostopic list</code>可以查询到有小球当前位置话题<code>/position</code>。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/newsun-boki/img-folder@main/20211125/Screenshot-from-2021-11-25-13-27-19.10uiu20b9brk.png"                                     ></li><li>发送内容为<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/newsun-boki/img-folder@main/20211125/Screenshot-from-2021-11-25-13-29-11.1lyv1ga20kio.png"                                     ></li><li>发送的消息格式为<code>geometry_msgs/PointStamped</code>，关于数据格式的了解见roswiki。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/newsun-boki/img-folder@main/20211125/Screenshot-from-2021-11-25-13-34-34.75bszbno3iw0.png"                                     ></li><li>发送频率大概是450hz<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/newsun-boki/img-folder@main/20211125/Screenshot-from-2021-11-25-13-28-44.6s1gt3r2c3w0.png"                                     ></li></ul><p>这里需要重新写一个<strong>预测节点</strong>，并在节点内创建一个<code>Subscriber</code>用于订阅<code>/position</code>话题。</p><h4 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h4><p>使用各种卡尔曼滤波(如EKF)的手段进行<strong>预测</strong>。通过小球之前的位置预测小球一段时间之后的位置，具体预测多久可自行决定。这里需要你学习一些卡尔曼的相关知识，使用Eigen库辅助来完成一些数学运算，尽量不要使用opencv自带的卡尔曼滤波。推荐B站DR_CAN的卡尔曼滤波相关<a class="link"   href="https://www.bilibili.com/video/BV1ez4y1X7eR" >讲解视频<i class="fas fa-external-link-alt"></i></a>.但注意简单的卡尔曼是线性的，所以需要用一些如扩展卡尔曼等。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/newsun-boki/img-folder@main/20211125/Screenshot-from-2021-11-25-14-19-03.49vp6ibwwqm0.png"                                     ><br>虽然卡尔曼是一个滤波算法，但由于其方法特性同样可以用来做预测。还有一个卡尔曼用于<a class="link"   href="https://www.bilibili.com/video/BV1dQ4y1m7ZC" >预测小球的讲解视频<i class="fas fa-external-link-alt"></i></a>(这个视频给了我这次任务灵感，虽然我并没有看)</p><h4 id="RVIZ显示"><a href="#RVIZ显示" class="headerlink" title="RVIZ显示"></a>RVIZ显示</h4><p>这里你需要大概了解rviz的使用方法。rviz可以接受话题里的消息并将其显示出来，你需要做的就是将你预测的结果发布为<code>PointStamped</code>格式并使用rviz显示，如果不了解结果可以参考<code>simu.py</code>里的实现。将<strong>你的预测结果用换一个颜色的小球显示出来</strong>就好。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><ul><li><code>rosrun random_ball simu.py</code>这个命令<code>ctrl+c</code>似乎停不下来，你可以使用<code>ctrl+z</code>将其挂到后台暂停它,然后通过<code>jobs</code>查看后台任务,并使用<code>kill %num</code>杀死它，<code>num</code>为其在<code>jobs</code>查看时任务对应的序号。</li><li>由于物体是随机运动，所以预测一段之后的时间不能过长，当然也不能过短。至于是多少，你看着觉得多少合适就多少。</li><li>评价预测好坏主要有两个指标<ul><li> <strong>收敛速度</strong>。包括当小球从静止到运动需要多久才能开始准确预测，以及当小球撞击边缘速度发生突变时尽量收敛到正确方向的时间(可以采取一些如当检测速度突变就reset卡尔曼的手段)</li><li> <strong>预测结果的稳定性</strong>。在实际控制当中，为了使电机不震颤，视觉的预测结果需要尽量的平滑稳定，即预测点不要乱抖。</li></ul></li><li>如果你觉的这个弹球模型好玩，并且看懂了弹球代码，你可以编写<code>simu.py</code>程序自己往里面多加几个球并加上物理体积的碰撞。或者我一总觉得这个碰到边缘没有音效怪怪的，你可以自己往里面加点音效。</li><li>为了方便查看，这个README我也会发到博客上。<ul><li>gitee：<a class="link"   href="https://gitee.com/newsun-boki/Ball3d" >https://gitee.com/newsun-boki/Ball3d<i class="fas fa-external-link-alt"></i></a></li><li>github:<a class="link"   href="https://github.com/newsun-boki/3dBall" >https://github.com/newsun-boki/3dBall<i class="fas fa-external-link-alt"></i></a></li><li>博客： <a class="link"   href="https://newsun-boki.github.io/2021/11/25/rm-train-1/" >https://newsun-boki.github.io/2021/11/25/rm-train-1/<i class="fas fa-external-link-alt"></i></a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;视觉进阶培训1-运动预测&quot;&gt;&lt;a href=&quot;#视觉进阶培训1-运动预测&quot; class=&quot;headerlink&quot; title=&quot;视觉进阶培训1-运动预测&quot;&gt;&lt;/a&gt;视觉进阶培训1-运动预测&lt;/h1&gt;&lt;p&gt;三维弹球，准确的来说有点像气体分子的运动，可以看成空间中有一</summary>
      
    
    
    
    <category term="rm" scheme="http://example.com/categories/rm/"/>
    
    
    <category term="c++" scheme="http://example.com/tags/c/"/>
    
    <category term="ros" scheme="http://example.com/tags/ros/"/>
    
    <category term="predict" scheme="http://example.com/tags/predict/"/>
    
    <category term="rviz" scheme="http://example.com/tags/rviz/"/>
    
  </entry>
  
  <entry>
    <title>KoroFileHeader-Vscode自动注释插件推荐</title>
    <link href="http://example.com/2021/11/22/KoroFileHeader/"/>
    <id>http://example.com/2021/11/22/KoroFileHeader/</id>
    <published>2021-11-22T14:55:16.000Z</published>
    <updated>2021-11-22T15:38:24.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KoroFileHeader-Vscode自动注释插件推荐"><a href="#KoroFileHeader-Vscode自动注释插件推荐" class="headerlink" title="KoroFileHeader-Vscode自动注释插件推荐"></a>KoroFileHeader-Vscode自动注释插件推荐</h1><p>写代码时注释是十分必要的，一个没有注释的代码几乎没人能看懂==屎山。</p><p>但是不得不说写注释是真的麻烦，而且我想写出一个好看一点的注释，让看得人也能赏心悦目，我就在想vscode有没有这么一款插件可以自动添加注释，结果您猜怎么着？还真有。</p><h2 id="KoroFileHeader-一款注释插件"><a href="#KoroFileHeader-一款注释插件" class="headerlink" title="KoroFileHeader-一款注释插件"></a>KoroFileHeader-一款注释插件</h2><ul><li>可用于代码段头的添加如：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: liboyu </span></span><br><span class="line"><span class="comment"> * @Date: 2021-11-Mo 10:48:22 </span></span><br><span class="line"><span class="comment"> * @Last Modified by:   liboyu </span></span><br><span class="line"><span class="comment"> * @Last Modified time: 2021-11-Mo 10:48:22 </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>也可以为函数添加注释,而且能够自动识别形参，你只需要把注释写在对应形参和返回值后就好啦</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * @description: 初始化函数</span></span><br><span class="line"><span class="comment">    * @param &#123;string&#125; xml_path                     openvino模型的地址</span></span><br><span class="line"><span class="comment">    * @param &#123;double&#125; cof_threshold                置信度阈值</span></span><br><span class="line"><span class="comment">    * @param &#123;double&#125; nms_area_threshold           nms的iou重合面积阈值</span></span><br><span class="line"><span class="comment">    * @param &#123;int&#125; _class_number                   总共的类数</span></span><br><span class="line"><span class="comment">    */</span>    </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">init</span><span class="params">(string xml_path,<span class="keyword">double</span> cof_threshold,<span class="keyword">double</span> nms_area_threshold,<span class="keyword">int</span> _class_number)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在vscode应用商店搜索KoroFileHeader安装。</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>头部标注添加：快捷键：window：ctrl+alt+i,mac：ctrl+cmd+i, linux: ctrl+meta+i,Ubuntu: ctrl+super+i</li><li>函数注释添加：快捷键：window：ctrl+alt+t,mac：ctrl+cmd+t,linux: ctrl+meta+t, Ubuntu: ctrl+super+t</li></ul><h2 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h2><p><strong>这竟然还能一键添加各种奇奇怪怪的东西，这才是这个插件的精髓</strong>(如果你看网页源码的话会发现我也添加了一个小东西)<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://github.com/OBKoro1/koro1FileHeader/raw/master/images/codeDesign.gif?raw=true"                                     ></p><!-- * _______________#########_______________________  * ______________############_____________________  * ______________#############____________________  * _____________##__###########___________________  * ____________###__######_#####__________________  * ____________###_#######___####_________________  * ___________###__##########_####________________  * __________####__###########_####_______________  * ________#####___###########__#####_____________  * _______######___###_########___#####___________  * _______#####___###___########___######_________  * ______######___###__###########___######_______  * _____######___####_##############__######______  * ____#######__#####################_#######_____  * ____#######__##############################____  * ___#######__######_#################_#######___  * ___#######__######_######_#########___######___  * ___#######____##__######___######_____######___  * ___#######________######____#####_____#####____  * ____######________#####_____#####_____####_____  * _____#####________####______#####_____###______  * ______#####______;###________###______#________  * ________##_______####________####______________  -->]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;KoroFileHeader-Vscode自动注释插件推荐&quot;&gt;&lt;a href=&quot;#KoroFileHeader-Vscode自动注释插件推荐&quot; class=&quot;headerlink&quot; title=&quot;KoroFileHeader-Vscode自动注释插件推荐&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="other" scheme="http://example.com/categories/other/"/>
    
    
    <category term="code" scheme="http://example.com/tags/code/"/>
    
    <category term="vscode" scheme="http://example.com/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04录屏并生成gif图片</title>
    <link href="http://example.com/2021/11/18/ubuntu-record-sc/"/>
    <id>http://example.com/2021/11/18/ubuntu-record-sc/</id>
    <published>2021-11-17T17:47:51.000Z</published>
    <updated>2021-11-17T17:49:57.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu18-04录屏并生成gif图片"><a href="#Ubuntu18-04录屏并生成gif图片" class="headerlink" title="Ubuntu18.04录屏并生成gif图片"></a>Ubuntu18.04录屏并生成gif图片</h1><p>用kazam录屏ffmpeg转gif</p><p>标记一下这篇文章，以免我忘了每次都要去找：</p><p><a class="link"   href="https://blog.csdn.net/RedKeyer/article/details/89519984" >https://blog.csdn.net/RedKeyer/article/details/89519984<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ubuntu18-04录屏并生成gif图片&quot;&gt;&lt;a href=&quot;#Ubuntu18-04录屏并生成gif图片&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu18.04录屏并生成gif图片&quot;&gt;&lt;/a&gt;Ubuntu18.04录屏并生成gif图片&lt;/</summary>
      
    
    
    
    <category term="other" scheme="http://example.com/categories/other/"/>
    
    
    <category term="ubuntu" scheme="http://example.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ROS新手介绍</title>
    <link href="http://example.com/2021/11/18/ros-begin/"/>
    <id>http://example.com/2021/11/18/ros-begin/</id>
    <published>2021-11-17T17:21:42.000Z</published>
    <updated>2021-11-17T19:05:45.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ROS介绍"><a href="#ROS介绍" class="headerlink" title="ROS介绍"></a>ROS介绍</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里只是ROS的基础入门的开始，做一个非常简单的讲解。</p><p>一般建议直接看官方文档：<a class="link"   href="http://wiki.ros.org/cn/ROS/Tutorials" >http://wiki.ros.org/cn/ROS/Tutorials<i class="fas fa-external-link-alt"></i></a>.</p><p>强烈建议看英文版：<a class="link"   href="http://wiki.ros.org/en/ROS/Tutorials" >http://wiki.ros.org/en/ROS/Tutorials<i class="fas fa-external-link-alt"></i></a>. 能够培养你阅读外的能力，毕竟大多数官方教程和写的好的教程是没有中文的。</p><h2 id="什么是ROS，为什么要用ROS"><a href="#什么是ROS，为什么要用ROS" class="headerlink" title="什么是ROS，为什么要用ROS"></a>什么是ROS，为什么要用ROS</h2><p>ROS的全称是<strong>Robot Operating System</strong>，也就是指<strong>机器人操作系统</strong>。但什么才是一个操作系统呢?想想现在都有些什么操作系统，Windows,linux,mac,Android等等，甚至你可能听过DOS系统，一个操作系统的基本特征有些什么呢？为什么ROS可以称为一个操作系统。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/newsun-boki/img-folder@main/20211118/ros.1xue58m21bj4.gif"                                     ></p><h3 id="分布式架构以及多进程"><a href="#分布式架构以及多进程" class="headerlink" title="分布式架构以及多进程"></a>分布式架构以及多进程</h3><p>想想你的Windows系统，你可以一边打游戏，一边看qq，后台还可能挂着杀毒软件，这些都是一个一个进程。一个操作系统运行往往包含大量的进程，但想想你写出来的代码，他可能是按着顺序来的，可能你把它放一个while循环里让他来回跑，或者你也可以多开几个线程让他分别跑着，但是这样还不够。</p><p>一个机器人，可能和人一样，有着眼睛(摄像头取流以及视觉目标检测),有着手(机械臂模块),脚(不同的底盘),还有着很多东西。这些东西光通讯就是一个大问题，更不要说让他们之间尽量互不干扰，但ros可以做到。就像你聊qq不耽误你打游戏一样。<strong>也就是说，在ros上，你实际上是可以运行多个程序，并且能够做到让这些程序间的数据互传。</strong></p><p>事实上，你也可以在其他的操作系统上做到这一点，例如通过SOCKER,管道，TCP协议等，但都没有ros方便快捷清晰。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/newsun-boki/img-folder@main/20211118/Screenshot-from-2021-11-18-02-11-39.638zlyali1c0.png"                                     ></p><h3 id="功能的划分以及极强的可扩展性"><a href="#功能的划分以及极强的可扩展性" class="headerlink" title="功能的划分以及极强的可扩展性"></a>功能的划分以及极强的可扩展性</h3><p>在不用ros的时候，想想机器人是怎么控制的。冗长的代码，看不懂的结构，更是因为模块众多导致的代码量大，往往不知所措。然而有了ros，一切都不一样了。你可以把每个功能的模块分开，这里的分开不是简单的封装到一个个函数里。而是完全的分开，即多个不同的功能包，多个不同的代码，唯一的连接就是一些消息间的互传。这使得每一个模块结构清晰简单，代码可读性增强，且可扩展性极强。</p><h3 id="良好的生态"><a href="#良好的生态" class="headerlink" title="良好的生态"></a>良好的生态</h3><p>由于ROS得到越来越多机器人制作者的青睐，越来越多的机器人相关硬件软件抖做了ros适配的相关工作。就和Windows上的游戏支持比mac上多的多一样，很多时候你买到游戏没有Windows寸步难行。同样由于很多硬件如激光雷达等对ROS的支持,没有ros寸步难行。良好的生态也决定促使ros愈发蓬勃发展，现如今，ros里集成的大量的库，你可以用它来做slam定位建图导航，也可以用它来做自动驾驶汽车，还有利用第三方软件Gazebo模拟仿真等。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/newsun-boki/img-folder@main/20211118/Screenshot-from-2021-11-18-02-10-30.6000i1mywqg0.png"                                     ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ROS介绍&quot;&gt;&lt;a href=&quot;#ROS介绍&quot; class=&quot;headerlink&quot; title=&quot;ROS介绍&quot;&gt;&lt;/a&gt;ROS介绍&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前</summary>
      
    
    
    
    <category term="rm" scheme="http://example.com/categories/rm/"/>
    
    
    <category term="ros" scheme="http://example.com/tags/ros/"/>
    
  </entry>
  
  <entry>
    <title>图片上传网络</title>
    <link href="http://example.com/2021/11/15/picx/"/>
    <id>http://example.com/2021/11/15/picx/</id>
    <published>2021-11-14T19:03:51.000Z</published>
    <updated>2021-11-14T19:36:46.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="picx图片上传网络"><a href="#picx图片上传网络" class="headerlink" title="picx图片上传网络"></a>picx图片上传网络</h1><p>在用markdown写博客上传网页时常常会涉及本地图片无法在网络显示的问题，这个时候一般的选择是先将图片上传到github/gitee或csdn然后再使用网络链接，但还是不够方便，并且github需要翻墙才能看的问题，有个国人大佬就开发了一个名叫<strong>picx</strong>的东西。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/newsun-boki/img-folder@main/20211115/Screenshot-from-2021-11-15-03-07-58.5jhahkkrhcs0.png"                                     ><br>上面这界面就是使用picx上传的，本质上他还是借用了你自己的github仓库去放图片，然而它使用一个叫CDN加速的东西让你的图片可以很快的显示。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li>github仓库:<a class="link"   href="https://github.com/XPoet/picx" >https://github.com/XPoet/picx<i class="fas fa-external-link-alt"></i></a></li><li>picx网页地址:<a class="link"   href="https://picx.xpoet.cn/#/upload" >https://picx.xpoet.cn/#/upload<i class="fas fa-external-link-alt"></i></a></li></ul><p>去github仓库看README教你如何在picx网页上配置，记得一定要使用生成的CDN加速的链接，否则就没有意义了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;picx图片上传网络&quot;&gt;&lt;a href=&quot;#picx图片上传网络&quot; class=&quot;headerlink&quot; title=&quot;picx图片上传网络&quot;&gt;&lt;/a&gt;picx图片上传网络&lt;/h1&gt;&lt;p&gt;在用markdown写博客上传网页时常常会涉及本地图片无法在网络显示的问题，</summary>
      
    
    
    
    <category term="other" scheme="http://example.com/categories/other/"/>
    
    
    <category term="markdown" scheme="http://example.com/tags/markdown/"/>
    
    <category term="blog" scheme="http://example.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>livox-mid70激光雷达使用实录</title>
    <link href="http://example.com/2021/11/14/livox-detection/"/>
    <id>http://example.com/2021/11/14/livox-detection/</id>
    <published>2021-11-14T14:50:48.000Z</published>
    <updated>2021-11-14T19:36:52.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="livox-mid70激光雷达使用实录"><a href="#livox-mid70激光雷达使用实录" class="headerlink" title="livox-mid70激光雷达使用实录"></a>livox-mid70激光雷达使用实录</h1><p>livox-mid70是由大疆发布的面阵激光雷达，是大疆为自动驾驶推出的一款激光雷达，同时也可用于建立三维地图，文物修复，与大疆无人机相结合使用。你可以在x86和arm架构上都可以使用(arm需要交叉编译)。<br>bilibili上Livox官方发布了大量的视频demo可以去围观一下，同时Livox也有一个论坛可以去看一下。</p><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a class="link"   href="https://livox-wiki-cn.readthedocs.io/zh_CN/latest/index.html" >https://livox-wiki-cn.readthedocs.io/zh_CN/latest/index.html<i class="fas fa-external-link-alt"></i></a><br>这是中文官方文档，请根据以上文档完成硬件上的连接以及Ip配置，一切以官方文档为主。</p><ul><li>硬件连接</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://livox-wiki-cn.readthedocs.io/zh_CN/latest/_images/one_lidar_connect.png"                                     ></p><ul><li><p>更改IP：一般来说刚拿到手都是<strong>静态IP</strong>，这时候你只需要将网线与你自己笔记本相连，然后通过用户手册查看你自己雷达的IP，那需要设置你自己电脑的IP为手动，并将其分在同一网段不同的地址下：</p><pre><code>  如我的Mid70的IP地址为192.168.1.105，  那么我电脑设置时  IP：192.168.1.104，  子网掩码：255.255.255.0,  网关：192.168.0.1</code></pre></li></ul><p>如果对IP配置有问题,或想改为动态IP详情参见<a class="link"   href="https://terra-1-g.djicdn.com/65c028cd298f4669a7f0e40e50ba1131/Download/update/Livox%20Mid%20Series%20User%20Manual%20(CN).pdf" >用户手册<i class="fas fa-external-link-alt"></i></a></p><h2 id="Livox-Viewer"><a href="#Livox-Viewer" class="headerlink" title="Livox Viewer"></a>Livox Viewer</h2><p>Livox Viewer是一款图形化操作的显示软件，有助于快速让你知道你的硬件连接和Ip配置有没有问题。</p><ul><li><a class="link"   href="https://terra-1-g.djicdn.com/65c028cd298f4669a7f0e40e50ba1131/Download/update/Livox%20Viewer%200.8.0.7z" >Livox-Viewer for Windows<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.livoxtech.com/3296f540ecf5458a8829e01cf429798e/downloads/Livox%20Viewer/Livox_Viewr_For_Linux_Ubuntu16.04_x64_0.7.0.tar.gz" >Livox-Viewer for ubuntu16.04<i class="fas fa-external-link-alt"></i></a>,下载后解压运行<code>./livox viewer.sh</code>即可打开如下界面。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://livox-wiki-cn.readthedocs.io/zh_CN/latest/_images/start_Viewer_and_link_Horizon.png"                                     ></li><li>官方软件Livox Viewer仅支持Windows或ubuntu16.04/14.04,所以建议如果不是这两个版本有ros可以直接上。</li></ul><h2 id="Livox-SDK"><a href="#Livox-SDK" class="headerlink" title="Livox-SDK"></a>Livox-SDK</h2><p>刚刚Livox Viewer只是一个快速尝试，如果你要做开发就<strong>必须</strong>要安装Livox-SDK(包括后面要在ros上使用也必须先要安装这个)</p><ul><li><p>github上中文<a class="link"   href="https://github.com/Livox-SDK/Livox-SDK/blob/master/README_CN.md" >README<i class="fas fa-external-link-alt"></i></a></p></li><li><p>先从github上clone下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Livox-SDK/Livox-SDK.git</span><br></pre></td></tr></table></figure></li><li><p>再编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Livox-SDK</span><br><span class="line"><span class="built_in">cd</span> build &amp;&amp; cmake ..</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li><li><p>简单运行demo，注意这里的sample是在build文件夹下面的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> sample/lidar &amp;&amp; ./lidar_sample</span><br></pre></td></tr></table></figure></li></ul><h2 id="livox-ros-driver"><a href="#livox-ros-driver" class="headerlink" title="livox-ros-driver"></a>livox-ros-driver</h2><p>不得不说ros是真的好用，所以建议在ros下使用，会使得一切都很清晰明了。装<code>livox-ros-driver</code>前必须要先装<code>Livox-SDK</code>。</p><ul><li><p>先从github上clone下来，这里一定要用下面这个命令把它clone到相应位置，否则会出问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Livox-SDK/livox_ros_driver.git ws_livox/src</span><br></pre></td></tr></table></figure></li><li><p>简单的<code>catkin_make</code>一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ws_livox</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure></li><li><p>别忘了添加环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ./devel/setup.sh</span><br></pre></td></tr></table></figure></li><li><p>之后跑个rviz的demo，让你的激光雷达点云数据在rviz里显示出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch livox_ros_driver livox_lidar_rviz.launch</span><br></pre></td></tr></table></figure></li></ul><h2 id="录制你的点云数据"><a href="#录制你的点云数据" class="headerlink" title="录制你的点云数据"></a>录制你的点云数据</h2><p>点云数据不像二维图像一样，简简单单录制一个视频就好，作为点云数据记录是比较特殊的。<br>livox一共有两种录制格式</p><h4 id="lvx格式"><a href="#lvx格式" class="headerlink" title="lvx格式"></a>lvx格式</h4><p>lvx格式是livox的一种自定义格式，如果你想在Windows上快速录制，可以<strong>使用Livox Viewer进行录制</strong>，也可以<strong>通过<code>Livox-SDK</code>中的文件录制</strong></p><ul><li>首先进入以下路径<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./Livox_SDK/build/sample/lidar_lvx_file</span><br></pre></td></tr></table></figure></li><li>然后运行下面这个文件，这里不用<code>-c</code>指定也可以，这里指定了lidar并设定持续10s<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./lidar_lvx_sample -c <span class="string">&quot;此处为已连接的Lidar的15位广播码&quot;</span> -t 10</span><br></pre></td></tr></table></figure>通过上面的操作会得到一个<code>.lvx</code>格式的文件，这个文件可以在Livox Viewer中直接播放，也可以转成<strong>rosbag</strong>(一个可以把ros中当前所有topic中message记录下来的东西)。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch livox_ros_driver lvx_to_rosbag.launch lvx_file_path:=<span class="string">&quot;/home/livox/test.lvx&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="rosbag格式"><a href="#rosbag格式" class="headerlink" title="rosbag格式"></a>rosbag格式</h4><p>rosbag是ros中非常好用的一个东西，我在之前的ros文章中有提到过。当我们在运行livox-ros-driver中的rviz显示时，即</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch livox_ros_driver livox_lidar_rviz.launch <span class="comment">#详情看上面livox-ros-driver</span></span><br></pre></td></tr></table></figure><p>我们可以把此时的所有消息用rosbag记录下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosbag record -a -o myrosbag.bag <span class="comment">#-a代表所有的消息,-c代表输出名称</span></span><br></pre></td></tr></table></figure><p>此时就会生成一个.bag文件，具体名称看终端的输出。<br>你可以通过以下命令进行播放rosbag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosbag play *.bag -l <span class="comment">#-l代表loop循环播放</span></span><br></pre></td></tr></table></figure><p>此时再打开在livox-ros-driver下的的rviz,就可以得到rosbag中的点云图了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ws_livox/src/livox_ros_driver/</span><br><span class="line">rviz -d config/display_lidar_points.rviz <span class="comment">#这种.rviz文件实际上是保存rviz相关显示的数据</span></span><br></pre></td></tr></table></figure><h2 id="livox-detection"><a href="#livox-detection" class="headerlink" title="livox_detection"></a>livox_detection</h2><p>livox_detection指的是激光点云检测，livox官方给的代码可以检测各种车和行人。官方说2080ti下需要50ms。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/newsun-boki/img-folder@main/20211115/demo1.4a7m388oo240.gif"                                     ></p><p>在Livox官方的github仓库中有两个激光点云检测仓库分别为<code>livox_detection</code>和<code>livox_dection_simu</code>。<br>这两个仓库看上去都差不多，但实际上非常坑的是：</p><ul><li><code>livox_detection</code>仓库中的预训练模型在可以识别人和车，但车的识别效果不是很好;</li><li><code>livox_dection_simu</code>仓库中的预训练模型只能识别车，而几乎无法识别到人(虽然代码看上去都差不多)。</li></ul><p>至于原因我也不知道，只是这坑了我一会儿，后来在issue发现了这个问题。</p><p>由于两个仓库操作都非常相似，这里选livox_detection_simu为例。</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ul><li>python3.6+</li><li>tensorflow1.13+ (tested on 1.13.0)</li><li>pybind11(后面的过程中安装)</li><li>ros</li></ul><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li><p>首先clone仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Livox-SDK/livox_detection_simu</span><br></pre></td></tr></table></figure></li><li><p>然后配置pybind(pybind就是这样，每次都需要clone在那个路径下才行)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> livox_detection_simu/utils/lib_cpp</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/pybind/pybind11.git</span><br></pre></td></tr></table></figure></li><li><p>编译(在刚刚的<code>lib_cpp</code>路径下)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake -DCMAKE_BUILD_TYPE=Release ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>把c++得到的依赖文件放到项目根目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp lib_cpp.so ../../../</span><br></pre></td></tr></table></figure></li><li><p>下载<a class="link"   href="https://terra-1-g.djicdn.com/65c028cd298f4669a7f0e40e50ba1131/Download/dataset/livox_detection_simu_model.zip" >预训练模型<i class="fas fa-external-link-alt"></i></a>,会得到model文件夹，把它放在项目根目录下，这样你就不用改模型地址了,</p></li><li><p>下载<a class="link"   href="https://terra-1-g.djicdn.com/65c028cd298f4669a7f0e40e50ba1131/github/livox_detection_v1.1_data.zip" >rosbag<i class="fas fa-external-link-alt"></i></a>,这是官方提供的rosbag，你也可以自己录一个。</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3></li><li><p>打开一个终端运行roscore</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure></li><li><p>打开一个终端运行rviz</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rviz -d ./config/show.rviz <span class="comment">#在livox_detection_simu仓库下</span></span><br></pre></td></tr></table></figure></li><li><p>打开一个终端播放rosbag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosbag play *.bag -r 0.1 <span class="comment">#找到你存放rosbag的路径运行，发送消息间隔0.1s</span></span><br></pre></td></tr></table></figure></li><li><p>打开一个终端运行目标检测程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python livox_detection_simu.py <span class="comment">#如果你的模型放在其他地方，你需要在config下将其模型路径改为你所放预训练模型的路径</span></span><br></pre></td></tr></table></figure></li></ul><p>由于目标检测速度相当慢，实时性非常差，队列里可能还缓存了很多帧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;livox-mid70激光雷达使用实录&quot;&gt;&lt;a href=&quot;#livox-mid70激光雷达使用实录&quot; class=&quot;headerlink&quot; title=&quot;livox-mid70激光雷达使用实录&quot;&gt;&lt;/a&gt;livox-mid70激光雷达使用实录&lt;/h1&gt;&lt;p&gt;li</summary>
      
    
    
    
    <category term="rm" scheme="http://example.com/categories/rm/"/>
    
    
    <category term="lidar" scheme="http://example.com/tags/lidar/"/>
    
  </entry>
  
  <entry>
    <title>在线文本对比</title>
    <link href="http://example.com/2021/11/09/text-compare-md/"/>
    <id>http://example.com/2021/11/09/text-compare-md/</id>
    <published>2021-11-09T05:59:46.000Z</published>
    <updated>2021-11-09T06:03:25.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在线文本对比"><a href="#在线文本对比" class="headerlink" title="在线文本对比"></a>在线文本对比</h1><p>推荐一个在线快速对比文本区别的网站：</p><p><a class="link"   href="https://text-compare.com/" >https://text-compare.com/<i class="fas fa-external-link-alt"></i></a></p><p>可能会需要翻墙，但还挺好用。</p><p>不用下载可以直接对比，发个博客留作记录。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在线文本对比&quot;&gt;&lt;a href=&quot;#在线文本对比&quot; class=&quot;headerlink&quot; title=&quot;在线文本对比&quot;&gt;&lt;/a&gt;在线文本对比&lt;/h1&gt;&lt;p&gt;推荐一个在线快速对比文本区别的网站：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;http</summary>
      
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="website" scheme="http://example.com/tags/website/"/>
    
  </entry>
  
  <entry>
    <title>ros基本操作</title>
    <link href="http://example.com/2021/11/03/ros%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2021/11/03/ros%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2021-11-02T17:56:47.000Z</published>
    <updated>2021-11-09T05:58:41.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ros基本操作"><a href="#ros基本操作" class="headerlink" title="ros基本操作"></a>ros基本操作</h1><h2 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h2><p>我们都知道话题机制是ros中必不可少的一个机制，那怎样查看我们所发布的话题呢</p><ul><li>list命令可以看到我们当前总共有哪些topic<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rostopic list</span><br></pre></td></tr></table></figure></li><li>echo命令可以输出指定topic里的消息的内容<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rostopic echo cmd_vel #cmd_vel是一个小海龟的速度topic</span><br></pre></td></tr></table></figure></li><li>hz命令可以计算指定topic消息发布的平均速率<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rostopic hz cmd_vel</span><br></pre></td></tr></table></figure></li><li>info命令可以输出topic里的message的数据类型以及发布者接受者<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rostopic info cmd_vel</span><br></pre></td></tr></table></figure></li><li>rosmag show可以显示某个数据类型里具体的数据类型结构（注意这个和当前运行的程序没有关系）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosmsg show geometry/Twist </span><br></pre></td></tr></table></figure>上面这个命令显示了geometry/Twist里包含的具体数据结构，如角速度(angular)xyz线速度(linear)xyz，geometry/Twist是cmd_vel这个topic里的消息的数据类型。</li></ul><h2 id="rqt"><a href="#rqt" class="headerlink" title="rqt"></a>rqt</h2><p>rqt是ros里可视化最基础的方式。</p><ul><li>rqt_graph可以显示出整个ros的分布式架构，包括节点，话题，服务等等<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rqt_graph</span><br></pre></td></tr></table></figure></li><li>rqt_plot可以实时绘制出具体的话题里的消息里的一个或多个数据的变化曲线<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rqt_plot cmd_vel/linear/x cmd_vel/angular/z</span><br></pre></td></tr></table></figure></li></ul><h2 id="rosbag"><a href="#rosbag" class="headerlink" title="rosbag"></a>rosbag</h2><p>rosbag可以记录消息，还可以重放消息。这对我们调试某个模块非常有帮助。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/bagfiles</span><br><span class="line">rosbag record -a</span><br></pre></td></tr></table></figure><p>-a 选项表示将当前发布的所有 topic 数据都录制保存到一个 rosbag 文件中，录制的数据包名字为日期加时间。<br>也可以只记录某些感兴趣的 topic</p><ul><li>想要录制指定topic上的消息，你可以运行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosbag record cmd_vel</span><br></pre></td></tr></table></figure></li></ul><p>如果要指定生成数据包的名字，则用-O /-o 参数，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosbag record -O filename.bag /topic_name1</span><br></pre></td></tr></table></figure><p>如果在 launch 文件中使用 rosbag record 命令，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;node pkg=&quot;rosbag&quot; type=&quot;record&quot; name=&quot;bag_record&quot; args=&quot;/topic1 /topic2&quot;/&gt; </span><br></pre></td></tr></table></figure><ul><li><p>rosbag info指令可以显示数据包中的信息:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosbag info filename.bag</span><br></pre></td></tr></table></figure></li><li><p>rosbag play<br>接下来回放数据包中的 topic。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosbag play &lt;bagfile&gt;</span><br></pre></td></tr></table></figure><p>如果想改变消息的发布速率，可以用下面的命令，-r 后面的数字对应播放速率。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosbag play -r 2 &lt;bagfile&gt;</span><br></pre></td></tr></table></figure><p>如果希望 rosbag 循环播放，可以用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosbag play -l  &lt;bagfile&gt;  # -l== --loop</span><br></pre></td></tr></table></figure><p>如果只播放感兴趣的 topic ，则用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosbag play &lt;bagfile&gt; --topic /topic1</span><br></pre></td></tr></table></figure><p>在上述播放命令执行期间，空格键可以暂停播放。</p></li></ul><h2 id="roslaunch"><a href="#roslaunch" class="headerlink" title="roslaunch"></a>roslaunch</h2><p>这里我就不写了<br>精品博客：<a class="link"   href="http://ttshun.com/2018/05/24/ROS%E5%AD%A6%E4%B9%A0%E4%B9%8Broslaunch/" >http://ttshun.com/2018/05/24/ROS学习之roslaunch/<i class="fas fa-external-link-alt"></i></a><br>来自励志献身slam的阿翔，里面有很多好的博文都可以去看一看，特别是slam相关的</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>未完待续，这里有一篇 比较详细的代码建议详细看一看：<a class="link"   href="http://ttshun.com/2018/03/22/ROS%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%91%BD%E4%BB%A4/" >http://ttshun.com/2018/03/22/ROS学习之基本概念和命令/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ros基本操作&quot;&gt;&lt;a href=&quot;#ros基本操作&quot; class=&quot;headerlink&quot; title=&quot;ros基本操作&quot;&gt;&lt;/a&gt;ros基本操作&lt;/h1&gt;&lt;h2 id=&quot;topic&quot;&gt;&lt;a href=&quot;#topic&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="rm" scheme="http://example.com/categories/rm/"/>
    
    
    <category term="rm" scheme="http://example.com/tags/rm/"/>
    
    <category term="ros" scheme="http://example.com/tags/ros/"/>
    
  </entry>
  
  <entry>
    <title>rosserial进行串口通信</title>
    <link href="http://example.com/2021/11/02/rosserial/"/>
    <id>http://example.com/2021/11/02/rosserial/</id>
    <published>2021-11-01T17:56:47.000Z</published>
    <updated>2021-11-02T16:34:56.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rosserial进行串口通信"><a href="#rosserial进行串口通信" class="headerlink" title="rosserial进行串口通信"></a>rosserial进行串口通信</h1><h2 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h2><h3 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h3><ul><li>用于两个模块之间传输数据，是我们最常用的数据通信方式之一。包括单片机之间的通信，单片机与工控机之间的通信，单片机与外设模块之间的通信等等。</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/newsun-boki/img-folder@main/20211102/Screenshot-from-2021-11-02-02-11-20.iyynbl97fo8.png"                      style="zoom:80%;"                 ><ul><li>由于 CPU 与接口之间按并行方式传输，接口与外设之间按串行方式传输，因此，在串行接口中，必须要有 “ 接收移位寄存器 “ （串→并）和 “ 发送移位寄存器 “ （并→串）.</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/newsun-boki/img-folder@main/20211102/Screenshot-from-2021-11-02-02-16-55.67nf1dm75zk0.png"                      style="zoom: 67%;"                 ><ul><li>串口通讯是以高低电平为传输媒介，一位一位的传输，这一点是后面需要时刻牢记的。</li></ul><h3 id="具体发送的过程"><a href="#具体发送的过程" class="headerlink" title="具体发送的过程"></a>具体发送的过程</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/newsun-boki/img-folder@main/20211102/Screenshot-from-2021-11-02-02-21-41.3wv7h75f5fg0.png"                                     ></p><ul><li><p>波特率：传输速度的参数。指的是信号被调制以后在单位时间内的变化，即单位时间内载波参数变化的次数。如每秒钟传送240个字符，而每个字符格式包含10位（1个起始位，1个停止位，8个数据位），这时的波特率为240Bd，比特率为10位*240个/秒=2400bps。</p></li><li><p>数据位：这是衡量通信中实际数据位的参数。当计算机发送一个信息包的数据位数，标准值是6、7和8位。比如，当我想发送一个uint8的整数，它就刚好能够完整发送。</p></li><li><p>我们只需要记住的是，串口一次只能发送8位二进制数，所以要发送和接受的数据是以8位二进制数的数组存储的，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint8_t</span> buffer[<span class="number">12</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="产生的问题"><a href="#产生的问题" class="headerlink" title="产生的问题"></a>产生的问题</h3><p>那既然我们一次只能发8位数字，那对于float这种32位的数字要怎么发呢？</p><p>答案是把它拆开为4个8位数字发出去。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> x = <span class="number">3.5</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> f1 = (*((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)&amp;(x)));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)&#123;                <span class="comment">//4个字节的float x转换为buffer中的4位</span></span><br><span class="line">        <span class="keyword">uint8_t</span> tmp = (f1 &gt;&gt; (<span class="number">8</span> * i)) &amp; <span class="number">0xff</span>;</span><br><span class="line">        buffer[i] = tmp;                    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>看上去拆开的方法显然没有我们想的那么简单。</li><li>我们知道<code>float</code>的数据存储类型是比较复杂的，有尾数幂数等等巴拉巴拉。当我们把其拆分的时候会遇到许多问题，为了更好的运算，我们将其转换为无符号32位整数,即<code>unsigned int</code>。</li><li>仔细看上面的代码<code> unsigned int f1 = (*((unsigned int *)&amp;(x)))</code>，你可能会感觉很疑惑这行代码，但你细看或许就明白了。</li><li>实际上是把x的指针类型强行从<code>float</code>变成<code>unsigned int</code>。这样的好处是其在内存中的值不会变,那个二进制数还是那些，而我们直接使用类型转换实际上会改变其在内存中的值。</li></ul><p>同样再收到消息的时候我们也需要相同的操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> hor = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &gt;= <span class="number">0</span> ; i--)&#123;            <span class="comment">//vertical pitch</span></span><br><span class="line">    hor += buffer[i];</span><br><span class="line">    <span class="keyword">if</span>(i) hor &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line">yaw = (*((<span class="keyword">float</span>*)&amp;hor));</span><br></pre></td></tr></table></figure><h3 id="Ubuntu中串口通讯"><a href="#Ubuntu中串口通讯" class="headerlink" title="Ubuntu中串口通讯"></a>Ubuntu中串口通讯</h3><p>Ubuntu下的串口助手cutecom可以快速帮你查看是否有串口信号传入你的ubuntu。(虽然我之前并没有用过，使用方法也可以请教电控组成员或自行谷歌，如果不大行就算了吧)</p><ul><li><p>安装cutecom并打开</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cutecom</span><br><span class="line">sudo cutecom</span><br></pre></td></tr></table></figure></li><li><p>查看连接你电脑的串口信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /dev | grep ttyU* <span class="comment">#/dev路径下通常包含了所连外设，故要查看串口需要在这里进行查看，而grep是正则化，只查看名字是ttyU开头的文件</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg | grep ttyS* <span class="comment">#网上看到的，不知道行不行</span></span><br></pre></td></tr></table></figure><p>你可以通过拔插串口看哪一个设备改变从而确定设备名称。</p><p>详细的你可以看我随便找的一个链接：<a class="link"   href="https://blog.csdn.net/maizousidemao/article/details/103236666" >https://blog.csdn.net/maizousidemao/article/details/103236666<i class="fas fa-external-link-alt"></i></a></p></li></ul><h4 id="Ros中的串口通讯"><a href="#Ros中的串口通讯" class="headerlink" title="Ros中的串口通讯"></a>Ros中的串口通讯</h4><p>Ros使用rosserial包作为串口通信的方式</p><ol><li>首先下载rosserial</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-melodic-serial</span><br></pre></td></tr></table></figure><ul><li>进入安装位置确认是否安装成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roscd serial</span><br></pre></td></tr></table></figure><ul><li>若是成功则能够进入位置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/ros/melodic/share/serial</span><br></pre></td></tr></table></figure><ol start="2"><li><p>然后创造工作空间,参照<a class="link"   href="https://blog.csdn.net/liuxiaodong400/article/details/88072502" >这个博客<i class="fas fa-external-link-alt"></i></a></p></li><li><p>创造功能包并编写以下代码</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//serial_port.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;serial/serial.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;serial_port&quot;</span>);</span><br><span class="line">    <span class="comment">//创建句柄（虽然后面没用到这个句柄，但如果不创建，运行时进程会出错）</span></span><br><span class="line">    ros::NodeHandle n;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建一个serial类</span></span><br><span class="line">    serial::Serial sp;</span><br><span class="line">    <span class="comment">//创建timeout</span></span><br><span class="line">    serial::Timeout to = serial::Timeout::<span class="built_in">simpleTimeout</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="comment">//设置要打开的串口名称</span></span><br><span class="line">    sp.<span class="built_in">setPort</span>(<span class="string">&quot;/dev/ttyUSB0&quot;</span>);</span><br><span class="line">    <span class="comment">//设置串口通信的波特率</span></span><br><span class="line">    sp.<span class="built_in">setBaudrate</span>(<span class="number">115200</span>);</span><br><span class="line">    <span class="comment">//串口设置timeout</span></span><br><span class="line">    sp.<span class="built_in">setTimeout</span>(to);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//打开串口</span></span><br><span class="line">        sp.<span class="built_in">open</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in"><span class="keyword">catch</span></span>(serial::IOException&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ROS_ERROR_STREAM</span>(<span class="string">&quot;Unable to open port.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断串口是否打开成功</span></span><br><span class="line">    <span class="keyword">if</span>(sp.<span class="built_in">isOpen</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ROS_INFO_STREAM</span>(<span class="string">&quot;/dev/ttyUSB0 is opened.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ros::Rate <span class="title">loop_rate</span><span class="params">(<span class="number">500</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(ros::<span class="built_in">ok</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取缓冲区内的字节数</span></span><br><span class="line">        <span class="keyword">size_t</span> n = sp.<span class="built_in">available</span>();</span><br><span class="line">        <span class="keyword">if</span>(n!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">uint8_t</span> buffer[<span class="number">1024</span>];</span><br><span class="line">            <span class="comment">//读出数据</span></span><br><span class="line">            n = sp.<span class="built_in">read</span>(buffer, n);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//16进制的方式打印到屏幕</span></span><br><span class="line">                std::cout &lt;&lt; std::hex &lt;&lt; (buffer[i] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            std::cout &lt;&lt; std::endl;</span><br><span class="line">            <span class="comment">//把数据发送回去</span></span><br><span class="line">            sp.<span class="built_in">write</span>(buffer, n);</span><br><span class="line">        &#125;</span><br><span class="line">        loop_rate.<span class="built_in">sleep</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关闭串口</span></span><br><span class="line">    sp.<span class="built_in">close</span>();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CmakeLists如下:</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>.<span class="number">3</span>)</span><br><span class="line"><span class="keyword">project</span>(serial_com)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Compile as C++11, supported in ROS Kinetic and newer</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(</span><br><span class="line">  <span class="keyword">include</span> <span class="variable">$&#123;catkin_INCLUDE_DIRS&#125;</span> <span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span> </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED COMPONENTS</span><br><span class="line">  OpenCV REQUIRED</span><br><span class="line">  roscpp</span><br><span class="line">  rospy</span><br><span class="line">  std_msgs</span><br><span class="line">  serial</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Declare a C++ library</span></span><br><span class="line"><span class="comment"># add_library($&#123;PROJECT_NAME&#125;</span></span><br><span class="line"><span class="comment">#   src/$&#123;PROJECT_NAME&#125;/serial_com.cpp</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(stm_com</span><br><span class="line">  serial_port.cpp</span><br><span class="line">)</span><br><span class="line"><span class="keyword">add_dependencies</span>(stm_com <span class="variable">$&#123;$&#123;PROJECT_NAME&#125;</span>_EXPORTED_TARGETS&#125; <span class="variable">$&#123;catkin_EXPORTED_TARGETS&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(stm_com</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">  <span class="variable">$&#123;OpenCV_LIBRARIES&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>运行roscore，运行节点看是否能打开串口。如果提示Unable to open port，是由于权限不够引起的，进行如下操作<br>创建文件:（若使用的是ttyACM将ttyusb替换即可）</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit <span class="regexp">/etc/</span>udev<span class="regexp">/rules.d/</span><span class="number">70</span>-ttyusb.rules</span><br></pre></td></tr></table></figure><p>在打开的文件中添加</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">KERNEL</span>==<span class="string">&quot;ttyUSB[0-9]*&quot;</span>, <span class="type">MODE</span>=<span class="string">&quot;0666&quot;</span></span><br></pre></td></tr></table></figure><p>或者直接更改权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 /dev/ttyUSB*<span class="comment">#后面这个是你的串口设备</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;rosserial进行串口通信&quot;&gt;&lt;a href=&quot;#rosserial进行串口通信&quot; class=&quot;headerlink&quot; title=&quot;rosserial进行串口通信&quot;&gt;&lt;/a&gt;rosserial进行串口通信&lt;/h1&gt;&lt;h2 id=&quot;串口通信&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="rm" scheme="http://example.com/categories/rm/"/>
    
    
    <category term="rm" scheme="http://example.com/tags/rm/"/>
    
    <category term="ros" scheme="http://example.com/tags/ros/"/>
    
  </entry>
  
  <entry>
    <title>从神经网络到深度学习</title>
    <link href="http://example.com/2021/11/02/mlbasic/"/>
    <id>http://example.com/2021/11/02/mlbasic/</id>
    <published>2021-11-01T17:50:00.000Z</published>
    <updated>2021-11-04T10:54:20.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从神经网络到深度学习"><a href="#从神经网络到深度学习" class="headerlink" title="从神经网络到深度学习"></a>从神经网络到深度学习</h1><hr><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在之前我们已经介绍过了一些优化问题，然而并不是所有优化问题从输入到目标函数之间都有明确的公式。不如说，在生活中大部分时候我们都很难建立一个很准确的数学模型，同时也无法得知需要优化什么参数，特别是对于图片分类来说。例如，给你一张图片，让你分辨是猫还是狗。对于输入来说，我们有一张图片rgb三通道的所有值，而需要输出0或1分别代表猫和狗。为了解决这个问题，我们引入神经网络等相关一系列概念。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img2020.cnblogs.com/blog/1839046/202012/1839046-20201213200410529-875096804.png"                      alt="猫狗"                ></p><h2 id="机器学习-神经网络-深度学习"><a href="#机器学习-神经网络-深度学习" class="headerlink" title="机器学习 神经网络 深度学习"></a>机器学习 神经网络 深度学习</h2><p>首先，有必要对神经网络、深度学习、机器学习的概念做个简单描述。</p><p>神经网络，该模型灵感来自动物的中枢神经系统，通常呈现为相互连接的“神经元”，它可以对输入值通过反馈机制使得它们适应对应的输出。</p><p>深度学习是神经网络的进阶版，它的基本思路与神经网络类似，但往往比神经网络有着更复杂的结构以及优化算法，是神经网络的纵向延伸，常见的模型有CNN, RNN, LSTM等。</p><p>机器学习是一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多门学科。专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。</p><p>下面的图片很好地描述了这三者之间的关系</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://pic1.zhimg.com/80/v2-6d2584526f458fa512543d04ffb66c42_1440w.jpg?source=1940ef5c"                      alt="区别"                > </p><h2 id="机器学习简介"><a href="#机器学习简介" class="headerlink" title="机器学习简介"></a>机器学习简介</h2><p><a class="link"   href="https://gitee.com/newsun-boki/XJTU_cource/blob/master/course3/1_ML_Basics.pdf" >ML<i class="fas fa-external-link-alt"></i></a></p><h2 id="神经网络基础"><a href="#神经网络基础" class="headerlink" title="神经网络基础"></a>神经网络基础</h2><p><strong>好的入门博文</strong>：<a class="link"   href="https://www.cnblogs.com/subconscious/p/5058741.html" >神经网络入门<i class="fas fa-external-link-alt"></i></a></p><p><strong>神经网络实践与理解</strong>：<a class="link"   href="http://playground.tensorflow.org/" >tensorflow游乐场<i class="fas fa-external-link-alt"></i></a></p><p><strong>神经网络的详细理解</strong>：<a class="link"   href="https://b23.tv/c44LK8" >吴恩达神经网络<i class="fas fa-external-link-alt"></i></a></p><p><strong>自己的板书</strong>:<a class="link"   href="https://gitee.com/newsun-boki/XJTU_cource/blob/master/course3/ml_nn.pdf" >ml_nn<i class="fas fa-external-link-alt"></i></a></p><h2 id="pytorch的相关介绍"><a href="#pytorch的相关介绍" class="headerlink" title="pytorch的相关介绍"></a>pytorch的相关介绍</h2><p>pytorch是python的第三方库，是由facebook开源的神经网络框架，并有专门针对GPU加速模型训练的模块。与tensorflow不同，pytorch编程简洁，接口简单，且速度不逊色于其他框架，是当前神经网络最简洁，高效的实现方法之一。</p><p><strong>好的博文</strong>：<a class="link"   href="https://zhuanlan.zhihu.com/p/265394674?utm_source=ZHShareTargetIDMore&utm_medium=social&utm_oi=907670979105415168" >知乎pytorch<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从神经网络到深度学习&quot;&gt;&lt;a href=&quot;#从神经网络到深度学习&quot; class=&quot;headerlink&quot; title=&quot;从神经网络到深度学习&quot;&gt;&lt;/a&gt;从神经网络到深度学习&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="rm" scheme="http://example.com/categories/rm/"/>
    
    
    <category term="rm" scheme="http://example.com/tags/rm/"/>
    
    <category term="machine leaning" scheme="http://example.com/tags/machine-leaning/"/>
    
  </entry>
  
  <entry>
    <title>sklearn决策树</title>
    <link href="http://example.com/2021/11/02/python-dt/"/>
    <id>http://example.com/2021/11/02/python-dt/</id>
    <published>2021-11-01T17:31:38.000Z</published>
    <updated>2021-11-01T17:34:28.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sklearn决策树"><a href="#sklearn决策树" class="headerlink" title="sklearn决策树"></a>sklearn决策树</h1><h3 id="参数表示"><a href="#参数表示" class="headerlink" title="参数表示"></a>参数表示</h3><p>决策树中有<strong>参数</strong>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DecisionTreeClassifier(criterion=<span class="string">&quot;gini&quot;</span></span><br><span class="line">           , splitter=<span class="string">&quot;best&quot;</span></span><br><span class="line">                    , max_depth=<span class="literal">None</span></span><br><span class="line">                    , min_samples_split=<span class="number">2</span></span><br><span class="line">                    , min_samples_leaf=<span class="number">1</span></span><br><span class="line">                    , min_weight_fraction_leaf=<span class="number">0.</span></span><br><span class="line">                    , max_features=<span class="literal">None</span></span><br><span class="line">                    , random_state=<span class="literal">None</span></span><br><span class="line">                    , max_leaf_nodes=<span class="literal">None</span></span><br><span class="line">                    , min_impurity_decrease=<span class="number">0.</span></span><br><span class="line">                    , min_impurity_split=<span class="literal">None</span></span><br><span class="line">                    , class_weight=<span class="literal">None</span>,</span><br><span class="line">                    presort=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>以下几个参数较为重要</p><blockquote><ul><li><strong>criterion</strong> : string, optional (default=”gini”)<br><u>用以设置用信息熵还是基尼系数计算。</u><br>(1).criterion=’gini’,分裂节点时评价准则是Gini指数。<br>(2).criterion=’entropy’,分裂节点时的评价指标是信息增益(模型欠拟合时使用)。</li><li><strong>max_depth</strong> : int or None, optional (default=None)。<br><u>指定树的最大深度</u>。 如果为None，表示树的深度不限。直到所有的叶子节点都是纯净的，即叶子节点 中所有的样本点都属于同一个类别。或者每个叶子节点包含的样本数小于min_samples_split。</li><li><strong>splitter</strong> : string, optional (default=”best”)。<br><u> 指定分裂节点时的策略。 </u><br>(1).splitter=’best’,表示选择最优的分裂策略。<br>(2).splitter=’random’,表示选择最好的随机切分策略。</li><li><strong>min_samples_leaf</strong> : int, float, optional (default=1)<br><u> 限定每个节点分枝后子节点至少有多少个数据，否则就不分枝</u>。<br>(1).如果为整数，则min_samples_split就是最少样本数。<br>(2).如果为浮点数(0到1之间)，则每个叶子节点最少样本数为ceil(min_samples_leaf * n_samples)</li></ul></blockquote><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><p>在编写代码时，对数据的预处理主要包括对数据的<strong>导入</strong>，<strong>补全</strong>与<strong>删减</strong>，<strong>x与y的选取</strong>，将<strong>字典变量转化为虚拟变量</strong>等</p><ol><li><strong>导入数据</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier </span><br><span class="line"><span class="keyword">from</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridsearchCV</span><br><span class="line">data = pd.read_csv(<span class="string">&quot;your_ducument&quot;</span>)</span><br><span class="line"><span class="comment">#查看数据信息</span></span><br><span class="line">data.info()</span><br><span class="line"><span class="comment">#显示表的前10行</span></span><br><span class="line">data.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li><li><strong>删除特征</strong><br>对于一些不需要的特征，例如<u>明显与因变量关系不大的特征</u>或是<u>缺失值实在太多难以填补的特征</u>可以适当性的直接拿掉。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.drop([<span class="string">&quot;被拿掉的特征名1，被拿掉特征名2&quot;</span>], inplace = <span class="literal">True</span>, axis = <span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这里<code>inplace = True</code>指的是将替换原有的data,即等价于<code>data = data.drop([&quot;被拿掉的特诊名1，被拿掉特诊名2&quot;],axis = 1)</code>。<br>关于<code>axis = 1</code>,只的是对<strong>列</strong>操作，即对<strong>每一行</strong>操作.</p></blockquote><ol start="3"><li><strong>填充缺失值</strong><br>假设我们有一特征为年龄(age)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用平均值来填补缺失值</span></span><br><span class="line">data[<span class="string">&quot;age&quot;</span>] = data[<span class="string">&quot;age&quot;</span>].fillna(data[<span class="string">&quot;age&quot;</span>].mean())</span><br></pre></td></tr></table></figure>当某特征仅缺失较少的值时，把缺失的那个数据所在行删掉即可<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认有axis = 0,即对整行进行操作</span></span><br><span class="line">data = data.dropna()</span><br></pre></td></tr></table></figure></li><li><strong>类型转换</strong><br>假设我们有一特征<u>楼层(floor)</u>：有first，second，third 三个string值，将其转化为0，1，2。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以得到[&quot;first&quot;,&quot;second&quot;,third]</span></span><br><span class="line">labels = data[<span class="string">&quot;floor&quot;</span>].unique().tolist()</span><br><span class="line"><span class="comment">#index可以返回元素x在列表中的位置</span></span><br><span class="line">data[<span class="string">&quot;floor&quot;</span>] = data[<span class="string">&quot;floor&quot;</span>].apply( <span class="keyword">lambda</span> x : labels.index(x))</span><br></pre></td></tr></table></figure><blockquote><ul><li>关于apply()的具体用法<a class="link"   href="https://blog.csdn.net/anshuai_aw1/article/details/82347016" >见此<i class="fas fa-external-link-alt"></i></a></li></ul></blockquote></li><li><strong>语法补充</strong><br>上述我们一直在使用的<strong>data</strong>是pandas特有的<strong>DataFrame</strong>类型，关于取出其中的某一列特征进行操作可以使用<code>data[&quot;age&quot;]</code>，但最好使用<code>data.loc[:,&quot;age&quot;]</code>或是<code>data.iloc[:,3]</code>。</li></ol><h3 id="分离特征-x-与标签-y"><a href="#分离特征-x-与标签-y" class="headerlink" title="分离特征(x)与标签(y)"></a>分离特征(x)与标签(y)</h3><p>假设我们要取出的标签是<u>楼层(floor)</u></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = data.iloc[:, data.colums !=<span class="string">&quot;floor&quot;</span>]</span><br><span class="line">y = data.iloc[:, data.colums == <span class="string">&quot;floor&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="划分训练集与测试集"><a href="#划分训练集与测试集" class="headerlink" title="划分训练集与测试集"></a>划分训练集与测试集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#选取30%为测试集，70%为训练集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">Xtrain, Xtext, Ytrain, Ytest = train_test_split(x, y, test_size = <span class="number">0.3</span>)</span><br></pre></td></tr></table></figure><p>此函数随机选取训练集与测试集，会将索引打乱，为了以防万一对后续造成额外影响，有必要纠正索引.</p><blockquote><ul><li>所谓”索引“，是pandas在导入时DataFrame对每一行数据按顺序产生的索引,当输入<code>Xtrain.index</code>时会返回被打乱的索引列表。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#恢复索引</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [Xtrain, Xtext, Ytrain, Ytest] ： </span><br><span class="line">    i.index = <span class="built_in">range</span>(i.shape[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h3><h4 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clf = DecisionTreeClassifier(random_state = <span class="number">25</span>)<span class="comment">#random_state为随机数种子</span></span><br><span class="line">clf = clf.fit(Xtrain, Ytrain)</span><br><span class="line">score = clf.score(Xtest, Ytest)<span class="comment">#R方</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h4><ul><li><strong>交叉验证</strong> : 指不断随机改变训练集与测试集<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#10次交叉验证均值</span></span><br><span class="line">cross_score = cross_val_score(clf, x, y, cv = <span class="number">10</span>).mean()</span><br></pre></td></tr></table></figure></li></ul><h4 id="调参"><a href="#调参" class="headerlink" title="调参"></a>调参</h4><ul><li><strong>基础方法</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">tr = []<span class="comment">#训练集拟合程度</span></span><br><span class="line">te = []<span class="comment">#测试集拟合程度</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) : </span><br><span class="line"><span class="comment">#调整max_depth，即剪枝</span></span><br><span class="line">    clf = DecisionTreeClassifier(random_state = <span class="number">25</span>, max_depth = i + <span class="number">1</span>)<span class="comment">#random_state为随机数种子</span></span><br><span class="line">    clf = clf.fit(Xtrain, Ytrain)</span><br><span class="line">    score_tr = clf.score(Xtest, Ytest)</span><br><span class="line">    score_te = cross_val_score(clf, x, y, cv = <span class="number">10</span>).mean()</span><br><span class="line">    tr.append(score_tr)</span><br><span class="line">    te.append(score_te)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>), tr, color = <span class="string">&quot;red&quot;</span>, label = <span class="string">&quot;train&quot;</span>)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>), te, color = <span class="string">&quot;blue&quot;</span>,label = <span class="string">&quot;test&quot;</span>)</span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">plt.yticks(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">plt.legend()</span><br><span class="line">ply.show()</span><br></pre></td></tr></table></figure></li><li><strong>网格搜索</strong><br>事实上就是暴力枚举，速度特别慢<br><del>(而且算了半天说不定还没一开始简简单单的好)</del><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">parameters = &#123;<span class="string">&quot;criterion&quot;</span>:(<span class="string">&quot;gini&quot;</span>,<span class="string">&quot;entropy&quot;</span>), </span><br><span class="line">                        <span class="string">&quot;spliter&quot;</span>:(<span class="string">&quot;best&quot;</span>,<span class="string">&quot;random&quot;</span>),</span><br><span class="line">                        <span class="string">&quot;max_depth&quot;</span>: [*<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)],</span><br><span class="line">                        <span class="string">&quot;min_samples_leaf&quot;</span> = [*<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>,<span class="number">5</span>)],</span><br><span class="line">                        <span class="string">&quot;min_impurity_decrease&quot;</span> = np.linspace(<span class="number">0</span>,<span class="number">0.5</span>,<span class="number">50</span>) &#125;</span><br><span class="line">clf = DecisionTreeClassifier(random = <span class="number">25</span>)</span><br><span class="line">GS = GridSearchCV(clf, parameters, cv = <span class="number">10</span>)</span><br><span class="line">GS = GS.fit(Xtrain, Ytrain)</span><br><span class="line">GS.best_params_<span class="comment">#最佳参数组合</span></span><br><span class="line">GS.best_score_<span class="comment">#最佳结果r方</span></span><br></pre></td></tr></table></figure><h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3>生成可视化图,在这里仅仅只能输出一个dot文件。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dot_data = export_graphviz(tree,out_file= <span class="string">&quot;result.dot&quot;</span>,class_names[<span class="string">&#x27;serious&#x27;</span>,<span class="string">&#x27;easy&#x27;</span>],feature_names=cancer.feature_names,impurity=<span class="literal">False</span>,filled=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>将.dot文件转为jpg文件，展示可视化图(不知道为啥不可用，要用cmd来转换 <code>dot result.dot -T jpg -o result.jpg)</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(graph,)= pydot.graph_from_dot_file(<span class="string">&#x27;result.dot&#x27;</span>)</span><br><span class="line">graph.write_png(<span class="string">&#x27;tree.png&#x27;</span>)</span><br></pre></td></tr></table></figure><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210125183759997.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;sklearn决策树&quot;&gt;&lt;a href=&quot;#sklearn决策树&quot; class=&quot;headerlink&quot; title=&quot;sklearn决策树&quot;&gt;&lt;/a&gt;sklearn决策树&lt;/h1&gt;&lt;h3 id=&quot;参数表示&quot;&gt;&lt;a href=&quot;#参数表示&quot; class=&quot;head</summary>
      
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="sklean" scheme="http://example.com/tags/sklean/"/>
    
    <category term="决策树" scheme="http://example.com/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>seaborn入门(6)PairGrid</title>
    <link href="http://example.com/2021/11/02/seaborn6/"/>
    <id>http://example.com/2021/11/02/seaborn6/</id>
    <published>2021-11-01T17:27:36.000Z</published>
    <updated>2021-11-01T17:29:25.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="seaborn入门-6-PairGrid"><a href="#seaborn入门-6-PairGrid" class="headerlink" title="seaborn入门(6)PairGrid"></a>seaborn入门(6)PairGrid</h1><h2 id="PairGrid"><a href="#PairGrid" class="headerlink" title="PairGrid"></a>PairGrid</h2><p>代码和图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">iris = sns.load_dataset(name=<span class="string">&#x27;iris&#x27;</span>,cache=<span class="literal">True</span>,data_home=<span class="string">&quot;./seaborn-data&quot;</span>)</span><br><span class="line">iris_g = sns.PairGrid(iris,hue = <span class="string">&quot;species&quot;</span>)</span><br><span class="line">iris_g.<span class="built_in">map</span>(plt.scatter)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210130001248178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ></p><p>累了，溜了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;seaborn入门-6-PairGrid&quot;&gt;&lt;a href=&quot;#seaborn入门-6-PairGrid&quot; class=&quot;headerlink&quot; title=&quot;seaborn入门(6)PairGrid&quot;&gt;&lt;/a&gt;seaborn入门(6)PairGrid&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="seaborn" scheme="http://example.com/tags/seaborn/"/>
    
  </entry>
  
  <entry>
    <title>seaborn入门(5)群图(cluster map)</title>
    <link href="http://example.com/2021/11/02/seaborn5/"/>
    <id>http://example.com/2021/11/02/seaborn5/</id>
    <published>2021-11-01T17:25:33.000Z</published>
    <updated>2021-11-01T17:27:18.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="seaborn入门-5-群图-cluster-map"><a href="#seaborn入门-5-群图-cluster-map" class="headerlink" title="seaborn入门(5)群图(cluster map)"></a>seaborn入门(5)群图(cluster map)</h1><h2 id="群图-cluster-map"><a href="#群图-cluster-map" class="headerlink" title="群图(cluster map)"></a>群图(cluster map)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">iris = sns.load_dataset(name=<span class="string">&#x27;iris&#x27;</span>,cache=<span class="literal">True</span>,data_home=<span class="string">&quot;./seaborn-data&quot;</span>)</span><br><span class="line">species = iris.pop(<span class="string">&#x27;species&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(species)</span><br><span class="line">sns.clustermap(iris)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129233342616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ><br>这图可能有亿点点复杂，但其实很简单(<del>并不是</del>)<br>这就是所谓的<strong>分层聚类热图</strong>，首先计算了点与点之间的距离，最接近的会被加入，然后开始比较行与列之间的关系。（<del>说了个几把</del> ）</p><p><strong>让我们稍微换一个简单一点点的例子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flights = flights.pivot_table(index = <span class="string">&#x27;month&#x27;</span>,columns = <span class="string">&#x27;year&#x27;</span>, values = <span class="string">&#x27;passengers&#x27;</span>)</span><br><span class="line">flights = flights.pivot_table(index = <span class="string">&#x27;month&#x27;</span>,columns = <span class="string">&#x27;year&#x27;</span>, values = <span class="string">&#x27;passengers&#x27;</span>)</span><br><span class="line">sns.clustermap(flights,cmap = <span class="string">&quot;Blues&quot;</span>, standard_scale=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>flights代表的是一个二维数组，代表某年某月的乘客人数，<a class="link"   href="https://blog.csdn.net/newsunson/article/details/113408300" >详情见<i class="fas fa-external-link-alt"></i></a></p><p>所以我们得到下面的图<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129234934427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ><br>你会发现年份和月份并不是按着顺序排列的，这其实就是一个相当于聚类的过程，你可以把他看成一个聚类后的热力图（<strong>我以为我懂了，仔细一想我好像还是有点懵，希望大佬们来补充一下</strong>）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;seaborn入门-5-群图-cluster-map&quot;&gt;&lt;a href=&quot;#seaborn入门-5-群图-cluster-map&quot; class=&quot;headerlink&quot; title=&quot;seaborn入门(5)群图(cluster map)&quot;&gt;&lt;/a&gt;seaborn</summary>
      
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="seaborn" scheme="http://example.com/tags/seaborn/"/>
    
  </entry>
  
  <entry>
    <title>seaborn入门(4)关联系数矩阵和热力图</title>
    <link href="http://example.com/2021/11/02/seaborn4/"/>
    <id>http://example.com/2021/11/02/seaborn4/</id>
    <published>2021-11-01T17:24:29.000Z</published>
    <updated>2021-11-01T17:26:51.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="seaborn入门-4-关联系数矩阵和热力图"><a href="#seaborn入门-4-关联系数矩阵和热力图" class="headerlink" title="seaborn入门(4)关联系数矩阵和热力图"></a>seaborn入门(4)关联系数矩阵和热力图</h1><h2 id="关联系数矩阵"><a href="#关联系数矩阵" class="headerlink" title="关联系数矩阵"></a>关联系数矩阵</h2><p>这个懂的都懂，大概就是表示两个变量之间的关联性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">tips_df = sns.load_dataset(name=<span class="string">&#x27;tips&#x27;</span>,cache=<span class="literal">True</span>,data_home=<span class="string">&quot;./seaborn-data&quot;</span>)</span><br><span class="line">tips_mx = tips_df.corr()</span><br><span class="line"><span class="built_in">print</span>(tips_df.corr())</span><br></pre></td></tr></table></figure><p>载入数据有问题看seaborn入门(1)<br>得到如下结果<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129230000142.png#pic_center"                      alt="在这里插入图片描述"                ></p><h2 id="热力图"><a href="#热力图" class="headerlink" title="热力图"></a>热力图</h2><p>我们可以将上面的矩阵可视化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.heatmap(tips_mx,annot = <span class="literal">True</span> , cmap = <span class="string">&#x27;Blues&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>其中cmap的选择和<a class="link"   href="https://editor.csdn.net/md/?articleId=113408019" >调色盘<i class="fas fa-external-link-alt"></i></a>一样</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129230758969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ></p><h2 id="酷酷的热力图"><a href="#酷酷的热力图" class="headerlink" title="酷酷的热力图"></a>酷酷的热力图</h2><p>我们采用新的数据，并创建一个数据透视图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flights = sns.load_dataset(name=<span class="string">&#x27;flights&#x27;</span>,cache=<span class="literal">True</span>,data_home=<span class="string">&quot;./seaborn-data&quot;</span>)</span><br><span class="line"><span class="comment">#数据透视图创建</span></span><br><span class="line">flights = flights.pivot_table(index = <span class="string">&#x27;month&#x27;</span>,columns = <span class="string">&#x27;year&#x27;</span>, values = <span class="string">&#x27;passengers&#x27;</span>)</span><br></pre></td></tr></table></figure><p>原来的数据是这样的<img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129232036805.png#pic_center"                      alt="在这里插入图片描述"                ><br>数据透视图是这样的，表示某年某月某日乘坐飞机的人数</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129231848465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ><br>画成热力图就是<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129232302523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ><br><del>有种马赛克的美感</del> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;seaborn入门-4-关联系数矩阵和热力图&quot;&gt;&lt;a href=&quot;#seaborn入门-4-关联系数矩阵和热力图&quot; class=&quot;headerlink&quot; title=&quot;seaborn入门(4)关联系数矩阵和热力图&quot;&gt;&lt;/a&gt;seaborn入门(4)关联系数矩阵和热</summary>
      
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="seaborn" scheme="http://example.com/tags/seaborn/"/>
    
  </entry>
  
  <entry>
    <title>seaborn入门(3)调色盘</title>
    <link href="http://example.com/2021/11/02/seaborn3/"/>
    <id>http://example.com/2021/11/02/seaborn3/</id>
    <published>2021-11-01T17:22:20.000Z</published>
    <updated>2021-11-01T17:25:19.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="seaborn入门-3-调色盘"><a href="#seaborn入门-3-调色盘" class="headerlink" title="seaborn入门(3)调色盘"></a>seaborn入门(3)调色盘</h1><h2 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h2><p>续接上文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">tips_df = sns.load_dataset(name=<span class="string">&#x27;tips&#x27;</span>,cache=<span class="literal">True</span>,data_home=<span class="string">&quot;./seaborn-data&quot;</span>)</span><br><span class="line">sns.set_style(<span class="string">&#x27;dark&#x27;</span>)</span><br><span class="line">sns.set_context(<span class="string">&#x27;talk&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="调色盘"><a href="#调色盘" class="headerlink" title="调色盘"></a>调色盘</h2><p>访问这个界面你能看到调色看给你的一些风格样式<br><code>https://matplotlib.org/3.3.1/tutorials/colors/colormaps.html</code><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129224410260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ><br>例如我选一个夏天风情的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.stripplot(x = <span class="string">&#x27;day&#x27;</span>,y = <span class="string">&#x27;total_bill&#x27;</span>, data = tips_df,jitter = <span class="literal">True</span>,hue = <span class="string">&#x27;sex&#x27;</span>,palette = <span class="string">&#x27;summer&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129225343154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;seaborn入门-3-调色盘&quot;&gt;&lt;a href=&quot;#seaborn入门-3-调色盘&quot; class=&quot;headerlink&quot; title=&quot;seaborn入门(3)调色盘&quot;&gt;&lt;/a&gt;seaborn入门(3)调色盘&lt;/h1&gt;&lt;h2 id=&quot;基础准备&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="seaborn" scheme="http://example.com/tags/seaborn/"/>
    
  </entry>
  
  <entry>
    <title>seaborn入门(2)继续展示seaborn的各种绘图效果</title>
    <link href="http://example.com/2021/11/02/seaborn2/"/>
    <id>http://example.com/2021/11/02/seaborn2/</id>
    <published>2021-11-01T17:17:55.000Z</published>
    <updated>2021-11-01T17:21:44.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="seaborn入门-2"><a href="#seaborn入门-2" class="headerlink" title="seaborn入门(2)"></a>seaborn入门(2)</h1><h2 id="准备数据集"><a href="#准备数据集" class="headerlink" title="准备数据集"></a>准备数据集</h2><p>续接上文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">tips_df = sns.load_dataset(name=<span class="string">&#x27;tips&#x27;</span>,cache=<span class="literal">True</span>,data_home=<span class="string">&quot;./seaborn-data&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="设置风格"><a href="#设置风格" class="headerlink" title="设置风格"></a>设置风格</h2><p>共有4种风格可以选，分别是”white”, “dark”, “whitegrid”, “darkgrid”, “ticks”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(<span class="string">&quot;dark&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="简单设置图中元素"><a href="#简单设置图中元素" class="headerlink" title="简单设置图中元素"></a>简单设置图中元素</h2><ul><li>设置画布大小</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure><ul><li>设置字体</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.set_context(<span class="string">&#x27;paper&#x27;</span>,font_scale=<span class="number">1.4</span>) </span><br></pre></td></tr></table></figure><blockquote><p>其中’paper’为风格，还有talk,poster等风格</p></blockquote><ul><li>设置坐标轴<br>例如下面的代码是删除左边的坐标轴，同理还可以设置<code>bottom = True</code>。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.despine(left = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><p>男性女性给的小费差异，默认来看是通过男性给小费的平均值和女性给小费的平均值来进行比较，也可以通过中位数<code>estimator = np.media</code>，标准差<code>np.std</code>，协方差<code>np.cov来估计</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.barplot(x = <span class="string">&#x27;sex&#x27;</span>, y = <span class="string">&#x27;total_bill&#x27;</span>, data = tips_df, estimator=np.mean)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129203730986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ></p><h2 id="计数图"><a href="#计数图" class="headerlink" title="计数图"></a>计数图</h2><p>与之相比，计数图可以对某个数据集统计数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.countplot(x = <span class="string">&#x27;sex&#x27;</span>, data = tips_df)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129221529262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ></p><h2 id="箱型图"><a href="#箱型图" class="headerlink" title="箱型图"></a>箱型图</h2><p>这种图不是很懂啊，希望有大佬来分析以下QwQ</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.boxplot(x = <span class="string">&#x27;day&#x27;</span>,y = <span class="string">&#x27;total_bill&#x27;</span>, data = tips_df, hue = <span class="string">&#x27;sex&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129221720323.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ></p><h2 id="小提琴图"><a href="#小提琴图" class="headerlink" title="小提琴图"></a>小提琴图</h2><p>同上，感觉这图有点骚,大概就是代表数据的分布。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.violinplot(x = <span class="string">&#x27;day&#x27;</span>,y = <span class="string">&#x27;total_bill&#x27;</span>, data = tips_df, hue = <span class="string">&#x27;sex&#x27;</span>,split = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129221827101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ></p><h2 id="剥离图"><a href="#剥离图" class="headerlink" title="剥离图"></a>剥离图</h2><p>这是一个代表不同数据点的散点图，其中一个变量是分类变量，代表着数据的平均分布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.stripplot(x = <span class="string">&#x27;day&#x27;</span>,y = <span class="string">&#x27;total_bill&#x27;</span>, data = tips_df,jitter = <span class="literal">True</span>,)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129222746989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ></p><h2 id="分簇散点图"><a href="#分簇散点图" class="headerlink" title="分簇散点图"></a>分簇散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.swarmplot(x  = <span class="string">&#x27;day&#x27;</span>,y = <span class="string">&#x27;total_bill&#x27;</span>, data = tips_df)</span><br></pre></td></tr></table></figure><p>算是小提琴图的点状形式吧<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129223303445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;seaborn入门-2&quot;&gt;&lt;a href=&quot;#seaborn入门-2&quot; class=&quot;headerlink&quot; title=&quot;seaborn入门(2)&quot;&gt;&lt;/a&gt;seaborn入门(2)&lt;/h1&gt;&lt;h2 id=&quot;准备数据集&quot;&gt;&lt;a href=&quot;#准备数据集&quot; cla</summary>
      
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="seaborn" scheme="http://example.com/tags/seaborn/"/>
    
  </entry>
  
  <entry>
    <title>seaborn入门(1)展示seaborn的各种绘图效果</title>
    <link href="http://example.com/2021/11/02/seaborn1/"/>
    <id>http://example.com/2021/11/02/seaborn1/</id>
    <published>2021-11-01T17:13:33.000Z</published>
    <updated>2021-11-01T17:19:10.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="seaborn入门-1-展示seaborn的各种绘图效果"><a href="#seaborn入门-1-展示seaborn的各种绘图效果" class="headerlink" title="seaborn入门(1)展示seaborn的各种绘图效果"></a>seaborn入门(1)展示seaborn的各种绘图效果</h1><h2 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br></pre></td></tr></table></figure><h2 id="载入数据集"><a href="#载入数据集" class="headerlink" title="载入数据集"></a>载入数据集</h2><p>以下代码可以查看seaborn自带的数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(sns.get_dataset_names())</span><br></pre></td></tr></table></figure><p>这里使用<strong>车祸信息</strong>作为原始数据集,按理来说下面代码就可以实现导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crash_df = sns.load_dataset(<span class="string">&quot;car_crashes&quot;</span>)</span><br></pre></td></tr></table></figure><p>但实际上，由于不可描述的某种抗力，导致在下载数据集的时候有可能下载不出来(<del>如果你加载出来了当我没说</del>)，所以<strong>需要到github上提前下载数据集</strong>(<a class="link"   href="https://github.com/mwaskom/seaborn-data" >https://github.com/mwaskom/seaborn-data<i class="fas fa-external-link-alt"></i></a>)<u>(建议先导入码云之后再下载)</u>，下载之后将数据集放入与文件相同的目录下，然后使用以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crash_df = sns.load_dataset(name=<span class="string">&quot;car_crashes&quot;</span>,cache=<span class="literal">True</span>,data_home=<span class="string">&quot;./seaborn-data&quot;</span>)</span><br></pre></td></tr></table></figure><p>现在可以查看表的内容了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(crash_df.head())</span><br></pre></td></tr></table></figure><h2 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h2><p>首先，选择你的风格,分别是”white”, “dark”, “whitegrid”, “darkgrid”, “ticks”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(<span class="string">&#x27;white&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="简单展示几种绘图方式"><a href="#简单展示几种绘图方式" class="headerlink" title="简单展示几种绘图方式"></a>简单展示几种绘图方式</h3><h4 id="displot"><a href="#displot" class="headerlink" title="displot()"></a>displot()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.displot(crash_df[<span class="string">&#x27;not_distracted&#x27;</span>],kde = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129195444571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ></p><h4 id="kdeplot"><a href="#kdeplot" class="headerlink" title="kdeplot()"></a>kdeplot()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.kdeplot(crash_df[<span class="string">&#x27;speeding&#x27;</span>],crash_df[<span class="string">&#x27;alcohol&#x27;</span>], data = crash_df, shade = </span><br><span class="line"><span class="literal">True</span> ,cbar=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129195527693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ></p><h4 id="jointplot"><a href="#jointplot" class="headerlink" title="jointplot()"></a>jointplot()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.jointplot(x = <span class="string">&#x27;speeding&#x27;</span>, y = <span class="string">&#x27;alcohol&#x27;</span>, data = crash_df,kind = <span class="string">&#x27;kde&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129195543526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ></p><h4 id="pairplot"><a href="#pairplot" class="headerlink" title="pairplot()"></a>pairplot()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.pairplot(crash_df)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129195640960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ></p><p>或者可以使用<strong>hue</strong>分类<u>（这里重新导入了一个数据集）</u></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tips_df = sns.load_dataset(name=<span class="string">&#x27;tips&#x27;</span>,cache=<span class="literal">True</span>,data_home=<span class="string">&quot;./seaborndata&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(tips_df.head())</span><br><span class="line">sns.pairplot(tips_df, hue = <span class="string">&#x27;sex&#x27;</span>,)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129195651651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ></p><h4 id="rugplot"><a href="#rugplot" class="headerlink" title="rugplot()"></a>rugplot()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这里用的是上面刚刚载入的数据集</span></span><br><span class="line">sns.rugplot(tips_df[<span class="string">&#x27;tip&#x27;</span>])</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/20210129195702475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld3N1bnNvbg==,size_16,color_FFFFFF,t_70#pic_center"                      alt="在这里插入图片描述"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;seaborn入门-1-展示seaborn的各种绘图效果&quot;&gt;&lt;a href=&quot;#seaborn入门-1-展示seaborn的各种绘图效果&quot; class=&quot;headerlink&quot; title=&quot;seaborn入门(1)展示seaborn的各种绘图效果&quot;&gt;&lt;/a&gt;se</summary>
      
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="seaborn" scheme="http://example.com/tags/seaborn/"/>
    
  </entry>
  
</feed>
